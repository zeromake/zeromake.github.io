{"title":"javascript的模块化","date":"2016-08-12T12:18:25.000Z","tags":["javascript","amd","cmd","commonjs","umd"],"last_date":"2016-08-12T14:09:50.000Z","filename":"javascript_modular","body":"<div class=\"toc\"><ul class=\"toc-tree\">\n<li class=\"toc-item toc-level-1\">\n<ul>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#一、为何而生\"><span class=\"toc-number\"></span><span class=\"toc-text\">一、为何而生</span></a>\n</li>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#二、模块加载规范\"><span class=\"toc-number\"></span><span class=\"toc-text\">二、模块加载规范</span></a>\n<ul>\n<li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1.commonjs\"><span class=\"toc-number\"></span><span class=\"toc-text\">1.CommonJS</span></a>\n</li>\n<li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2.amd(asynchronous module definition)规范\"><span class=\"toc-number\"></span><span class=\"toc-text\">2.AMD(Asynchronous Module Definition)规范</span></a>\n</li>\n<li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3.cmd(common module definition)规范\"><span class=\"toc-number\"></span><span class=\"toc-text\">3.CMD(Common Module Definition)规范</span></a>\n</li>\n<li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5.umd规范\"><span class=\"toc-number\"></span><span class=\"toc-text\">5.UMD规范</span></a>\n</li></ul>\n</li></ul>\n</li></ul></div><h2><a class=\"anchor\" name=\"一、为何而生\" href=\"#一、为何而生\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一、为何而生</h2><hr>\n<p>这个些模块加载都是为了更好的管理js文件，以及引用其他文件更加方便，并且使每一个模块的全局域不再互相污染。模块化后可以使用<code>npm</code>进行管理以便分享。</p>\n<h2><a class=\"anchor\" name=\"二、模块加载规范\" href=\"#二、模块加载规范\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>二、模块加载规范</h2><hr>\n<h3><a class=\"anchor\" name=\"1.commonjs\" href=\"#1.commonjs\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.CommonJS</h3><p>官网: <a href=\"http://www.commonjs.org\">http://www.commonjs.org</a>\n现常用于<code>nodejs</code>,每一个文件都是一个模块,使用<code>require</code>方法引入文件它会把引入的文件执行并最后将文件中的exports对象返回.这样好处就是不再污染全局域.但是有一点它是同步的就是你引入了就会加载文件.\n官方说明可以使用在浏览器环境上，当然并没有人用.</p>\n<h3><a class=\"anchor\" name=\"2.amd(asynchronous module definition)规范\" href=\"#2.amd(asynchronous module definition)规范\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.AMD(Asynchronous Module Definition)规范</h3><p>规范文档: <a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\">https://github.com/amdjs/amdjs-api/wiki/AMD</a>\n因为上面的CommonJS不合适使用在浏览器环境中所以有了amd。它采用异步方式加载模块\namd定义也使用<code>require</code>加载模块</p>\n<pre class=\"code javascript\"><code class=\"javascript\"><span class=\"hljs-built_in\">require</span>([<span class=\"hljs-built_in\">module</span>], callback([<span class=\"hljs-built_in\">module</span>]));\n</code></pre>\n<p>定义模块module-name可选module依赖的模块,加载后的callback执行并将module依赖作为参数传入</p>\n<pre><code>define(<span class=\"hljs-keyword\">module</span>-<span class=\"hljs-keyword\">name</span>, [<span class=\"hljs-keyword\">module</span>], callback([<span class=\"hljs-keyword\">module</span>]));\n</code></pre><p>一个示例只有require加载完成模块后才会调用回调.</p>\n<pre><code><span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">'math'</span>], <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-params\">(math)</span></span> {\n   <span class=\"hljs-built_in\">math</span>.add(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);\n});\n</code></pre><p>实现了AMD规范的js库: 最火的是require.js</p>\n<blockquote>\n<ul class=\"contains-list\">\n<li class=\"list-item\">require.js: <a href=\"http://requirejs.org\">http://requirejs.org</a></li>\n</ul>\n<h3><a class=\"anchor\" name=\"3.cmd(common module definition)规范\" href=\"#3.cmd(common module definition)规范\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.CMD(Common Module Definition)规范</h3></blockquote>\n<p>规范文档: <a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\">https://github.com/cmdjs/specification/blob/master/draft/module.md</a>\n基本和AMD差不多唯一不一样的是模块依赖设置不再直接使用require设置参数</p>\n<pre class=\"code javascript\"><code class=\"javascript\">define(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">require</span>, exports, <span class=\"hljs-built_in\">module</span></span>)</span>{\n    <span class=\"hljs-comment\">//使用require</span>\n    <span class=\"hljs-keyword\">var</span> $ = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"jquery\"</span>);\n    <span class=\"hljs-comment\">//给exports设置属性</span>\n    exports.test = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{}\n    <span class=\"hljs-comment\">//或者使用module.export返回模块对象</span>\n    <span class=\"hljs-built_in\">module</span>.<span class=\"hljs-keyword\">export</span>={\n        <span class=\"hljs-comment\">//</span>\n</code></pre>\n<pre><code>}\n</code></pre><p>});</p>\n<pre><code>这样的好处不用在参数中声明.\n实现库:\n&gt; - sea.js:[http:<span class=\"hljs-comment\">//seajs.org](http://seajs.org)</span>\n### <span class=\"hljs-number\">4.</span>ES6模块\n\n和CommonJS类似使用<span class=\"hljs-keyword\">import</span>导入兼容CommonJS.查找模块方式和CommonJS一样\n``` javascript\n<span class=\"hljs-keyword\">import</span> jquery <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'jquery'</span>;\n</code></pre><p>export在es6模块导入时使用是一个关键字可以多次使用</p>\n<pre class=\"code javascrtip\"><code class=\"javascrtip\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">test</span>(<span class=\"hljs-params\"></span>)</span>{}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Demo</span></span>{\n}\n</code></pre>\n<h3><a class=\"anchor\" name=\"5.umd规范\" href=\"#5.umd规范\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.UMD规范</h3><p>规范文档: <a href=\"https://github.com/umdjs/umd\">https://github.com/umdjs/umd</a>\nUMD支持通用三种模块CommonJS,AMD,window(全局变量挂载)</p>\n<pre class=\"code javascript\"><code class=\"javascript\">(<span class=\"hljs-name\">function</span> (<span class=\"hljs-name\">root</span>, factory) {\n    //模块名\n    var module_name = <span class=\"hljs-string\">\"xxx\"</span><span class=\"hljs-comment\">;</span>\n    //判断是否为CommonJS\n    if (<span class=\"hljs-name\">typeof</span> exports === <span class=\"hljs-symbol\">'object</span>' &amp;&amp; typeof require === <span class=\"hljs-string\">\"function\"</span>) {\n        module.exports = factory(<span class=\"hljs-name\"><span class=\"hljs-builtin-name\">require</span></span>(<span class=\"hljs-symbol\">'xxx</span>'),...)<span class=\"hljs-comment\">;</span>\n    //判断是否为amd\n    } else if (<span class=\"hljs-name\">typeof</span> define === <span class=\"hljs-symbol\">'function</span>' &amp;&amp; define.amd) {\n        define([<span class=\"hljs-name\">module</span>],factory)<span class=\"hljs-comment\">;</span>\n    //判断是否为全局变量挂载\n    } else {\n        root[<span class=\"hljs-name\">module_name</span>] = factory(<span class=\"hljs-name\">root.xxx</span>,...)<span class=\"hljs-comment\">;</span>\n    }\n})(<span class=\"hljs-name\">this</span>, function ([<span class=\"hljs-name\">module</span>]) {\n    //module ...\n    return {}<span class=\"hljs-comment\">;</span>\n})<span class=\"hljs-comment\">;</span>\n</code></pre>\n"}