{"title":"koa-webpack-middleware-zm","date":"2017-03-01T21:33:04.000Z","tags":["node","js","npm"],"last_date":"2017-03-05T12:26:04.000Z","filename":"koa-webpack-middleware","body":"<div class=\"toc\"><ul class=\"toc-tree\">\n<li class=\"toc-item toc-level-1\">\n<ul>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#前言\"><span class=\"toc-number\"></span><span class=\"toc-text\">前言</span></a>\n</li>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#一. koa与express的普通中间件区别。\"><span class=\"toc-number\"></span><span class=\"toc-text\">一. koa与express的普通中间件区别。</span></a>\n</li>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#二. 异步中间件的区别\"><span class=\"toc-number\"></span><span class=\"toc-text\">二. 异步中间件的区别</span></a>\n</li>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#三. 修改一个express中间件到koa\"><span class=\"toc-number\"></span><span class=\"toc-text\">三. 修改一个express中间件到koa</span></a>\n</li>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#四. 修改express注意事项\"><span class=\"toc-number\"></span><span class=\"toc-text\">四. 修改express注意事项</span></a>\n</li>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#五. 改造webpack-dev-middleware的例子\"><span class=\"toc-number\"></span><span class=\"toc-text\">五. 改造webpack-dev-middleware的例子</span></a>\n</li>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#六. 改造webpack-hot-middleware的例子\"><span class=\"toc-number\"></span><span class=\"toc-text\">六. 改造webpack-hot-middleware的例子</span></a>\n</li>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#七. 例子源码\"><span class=\"toc-number\"></span><span class=\"toc-text\">七. 例子源码</span></a>\n</li></ul>\n</li></ul></div><h2><a class=\"anchor\" name=\"前言\" href=\"#前言\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2><ul class=\"contains-list\">\n<li class=\"list-item\">在前面的对<code>vue-ssr</code>改造为<code>koa</code>的<code>web</code>框架，我使用了一个第三方npm库。</li>\n<li class=\"list-item\">包名为 <del><code>koa2-webpack-middleware-zm</code></del> 已迁移到<code>koa-webpack-middleware-zm</code>。</li>\n<li class=\"list-item\">这个包是我自己因为ssr的特殊需求<code>github</code>上并没有合适的包。</li>\n<li class=\"list-item\">所以自行参考了<a href=\"ttps://github.com/leecade/koa-webpack-middleware\">koa-webpack-middleware</a>后写出的包。</li>\n<li class=\"list-item\">并且修复原有包的一些 bug。</li>\n<li class=\"list-item\"><p>这篇博文我将写以下内容</p>\n<blockquote>\n<ul class=\"contains-list\">\n<li class=\"list-item\">koa 中间件的编写。</li>\n<li class=\"list-item\">把<code>webpack-dev-middleware</code>这种<code>express</code>中间件改造为一个<code>koa</code>中间件。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h2><a class=\"anchor\" name=\"一. koa与express的普通中间件区别。\" href=\"#一. koa与express的普通中间件区别。\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一. koa与express的普通中间件区别。</h2><ul class=\"contains-list\">\n<li class=\"list-item\">npm 包安装<pre class=\"code shell\"><code class=\"shell\">npm i koa express -D\n</code></pre>\n</li>\n<li class=\"list-item\">koa和express的基本模板。koa只能用new的方式创建\n// koa\nconst Koa = require(&#39;koa&#39;)\n// ... use code\nconst KoaApp = new Koa()\nKoaApp.listen(8000)express可以用方法调用或new的方式创建<pre class=\"code javascript\"><code class=\"javascript\"><span class=\"hljs-comment\">// express</span>\n<span class=\"hljs-keyword\">const</span> Express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'express'</span>)\n<span class=\"hljs-comment\">// ... use code</span>\n<span class=\"hljs-keyword\">const</span> ExpressApp = Express()\nExpressApp.listen(<span class=\"hljs-number\">8080</span>)\n</code></pre>\n</li>\n<li class=\"list-item\"><p>两者的hello。</p>\n<p>koa:\n// use code\nKoaApp.use(function(ctx, next){\n  ctx.body = &#39;hello koa&#39;\n})</p>\n<p>express:</p>\n<pre class=\"code javascript\"><code class=\"javascript\"><span class=\"hljs-comment\">// use code</span>\nExpressApp.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>)</span>{\n  res.end(<span class=\"hljs-string\">'hello exress'</span>)\n})\n</code></pre>\n</li>\n<li class=\"list-item\"><p>express 中间件运行逻辑</p>\n<blockquote>\n<ol class=\"contains-list\">\n<li class=\"list-item\">中间件为一个方法接受 req,res,next 三个参数。</li>\n<li class=\"list-item\">中间可以执行任何方法包括异步方法。</li>\n<li class=\"list-item\">最后一定要通过<code>res.end</code>或者<code>next</code>来通知结束这个中间件方法。</li>\n<li class=\"list-item\">如果没有执行<code>res.end</code>或者<code>next</code>访问会一直卡着不动直到超时。</li>\n<li class=\"list-item\">并且在这之后的中间件也会没法执行到。</li>\n</ol>\n</blockquote>\n</li>\n<li class=\"list-item\"><p>koa 的中间件运行逻辑</p>\n<blockquote>\n<ol class=\"contains-list\">\n<li class=\"list-item\">中间件为一个方法或者其它，这里就讲方法的，接受<code>ctx,next</code>两个参数。</li>\n<li class=\"list-item\">方法中可以执行任何同步方法。可以使用返回一个<code>Promise</code>来做异步。</li>\n<li class=\"list-item\">中间件通过方法结束时的返回来判断是否进入下一个中间件。</li>\n<li class=\"list-item\">返回一个<code>Promise</code>对象koa会等待异步通知完成。then中可以返回next()来跳转到下一个中间件。</li>\n<li class=\"list-item\">相同如果<code>Promise</code>没有异步通知也会卡住。</li>\n</ol>\n</blockquote>\n<h2><a class=\"anchor\" name=\"二. 异步中间件的区别\" href=\"#二. 异步中间件的区别\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>二. 异步中间件的区别</h2></li>\n<li class=\"list-item\"><p>express 异步中间件\nExpressApp.use(function(req, res, next){\n  setTimeout(function(){\n      res.end(&#39;测试&#39;)\n  }, 0)\n})</p>\n<p>express 的异步就是最普通的回调</p>\n</li>\n<li class=\"list-item\"><p>koa 异步中间件\nKoaApp.use(function(ctx, next){\n  return new Promise(function(resolve, reject) {\n      if (ctx.path === &#39;/&#39;){\n          ctx.body = &#39;hello koa&#39;\n          resolve()\n      } else {\n          reject()\n      }\n  }).catch(next)\n})\nkoa 的异步通过<code>Promise</code>来做这里我<code>then</code>不写代表<code>resolve</code>不切换到下一个中间件。</p>\n<p><code>catch</code>直接绑定<code>next</code>，用<code>reject</code>来通知跳转到下一个中间件。</p>\n<h2><a class=\"anchor\" name=\"三. 修改一个express中间件到koa\" href=\"#三. 修改一个express中间件到koa\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>三. 修改一个express中间件到koa</h2></li>\n<li class=\"list-item\">hello-test.js<pre class=\"code javascript\"><code class=\"javascript\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">req, res, next</span>)</span>{\n  setTimeout(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n      <span class=\"hljs-keyword\">if</span> (req.path === <span class=\"hljs-string\">'/'</span>){\n          res.end(<span class=\"hljs-string\">'测试'</span>)\n      }<span class=\"hljs-keyword\">else</span>{\n          next()\n      }\n  }, <span class=\"hljs-number\">0</span>)\n}\n</code></pre>\n</li>\n<li class=\"list-item\">express 使用<pre class=\"code javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">const</span> test = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./hello-test.js'</span>)\nExpressApp.use(test)\n</code></pre>\n</li>\n<li class=\"list-item\"><p>修改到 koa 使用\nconst test = require(&#39;./hello-test.js&#39;)\nKoaApp.use(function (ctx, next){\n  const res = ctx.res\n  const req = ctx.req\n  const end = res.end\n  return new Promise(function(resolve, reject) {\n      res.end = function () {\n          end.apply(this, arguments)\n          resolve()\n      }\n      test(res, req, reject)\n  }).catch(next)\n})\n通过修改原有的<code>res.end</code>运行<code>resolve</code>通知<code>Promise</code>结束,</p>\n<p>修改<code>next</code>用<code>reject</code>替代通知<code>Promise</code>调用<code>next</code>。</p>\n<h2><a class=\"anchor\" name=\"四. 修改express注意事项\" href=\"#四. 修改express注意事项\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>四. 修改express注意事项</h2></li>\n<li class=\"list-item\"><p>原有的<code>express</code>组件是通过回调来通知结束的。不要直接<code>await</code>或者<code>yield</code>一个组件。它们又不是返回一个<code>Promise</code>对象。</p>\n<pre class=\"code javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">const</span> test = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./hello-test.js'</span>)\nKoaApp.use(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> *(<span class=\"hljs-params\">next</span>)</span>{\n <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">this</span>.res\n <span class=\"hljs-keyword\">const</span> req = <span class=\"hljs-keyword\">this</span>.req\n <span class=\"hljs-comment\">// 这种写法会导致后面注册的中间件都失效。</span>\n <span class=\"hljs-keyword\">yield</span> test(res, req, next)\n})\nKoaApp.use(<span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">ctx, next</span>)</span>{\n <span class=\"hljs-keyword\">const</span> res = ctx.res\n <span class=\"hljs-keyword\">const</span> req = ctx.req\n <span class=\"hljs-comment\">// 这种写法会导致后面注册的中间件都失效。</span>\n <span class=\"hljs-keyword\">await</span> test(res, req, next)\n})\n</code></pre>\n</li>\n<li class=\"list-item\"><p>只有在<code>catch</code>或者是<code>then</code>中返回<code>next()</code>才能跳转到下一个组件。</p>\n<h2><a class=\"anchor\" name=\"五. 改造webpack-dev-middleware的例子\" href=\"#五. 改造webpack-dev-middleware的例子\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>五. 改造webpack-dev-middleware的例子</h2><p><a href=\"https://github.com/zeromake/koa-webpack-middleware-zm/blob/master/lib/devMiddleware.js\">devMiddleware.js</a>\nfunction koaDevMiddleware(expressDevMiddleware) {\n return function middleware(ctx, next) {\n     return new Promise((resolve) =&gt; {\n         expressDevMiddleware(ctx.req, {\n             end: (content) =&gt; {\n                 ctx.body = content;\n                 resolve(false);\n             },\n             setHeader: (name, value) =&gt; {\n                 ctx.set(name, value);\n             },\n         }, () =&gt; {\n             resolve(true);\n         });\n     }).then((err) =&gt; {\n         if (err) { return next(); }\n         return null;\n     });\n };\n}\nmodule.exports = koaDevMiddleware;</p>\n<p>这是昨天最新的代码当时没想着用<code>reject</code>来通知<code>next</code>后面大概要改成这样。</p>\n<h2><a class=\"anchor\" name=\"六. 改造webpack-hot-middleware的例子\" href=\"#六. 改造webpack-hot-middleware的例子\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>六. 改造webpack-hot-middleware的例子</h2><p><a href=\"https://github.com/zeromake/koa-webpack-middleware-zm/blob/master/lib/hotMiddleware.js\">hotMiddleware.js</a></p>\n<pre class=\"code javascript\"><code class=\"javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">koaHotMiddleware</span>(<span class=\"hljs-params\">expressHotMiddleware</span>) </span>{\n <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">middleware</span>(<span class=\"hljs-params\">ctx, next</span>) </span>{\n     <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> {\n         expressHotMiddleware(ctx.req, ctx.res, resolve);\n     }).then(next);\n };\n}\n<span class=\"hljs-built_in\">module</span>.exports = koaHotMiddleware;\n</code></pre>\n<h2><a class=\"anchor\" name=\"七. 例子源码\" href=\"#七. 例子源码\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>七. 例子源码</h2></li>\n<li class=\"list-item\"><a href=\"https://github.com/zeromake/koa-webpack-middleware-zm\">koa-webpack-middleware-zm</a></li>\n<li class=\"list-item\">欢迎star，issues，fork, pr</li>\n<li class=\"list-item\"><p>下篇写这些内容</p>\n<blockquote>\n<ul class=\"contains-list\">\n<li class=\"list-item\">在<code>npm</code>上发布你的包以共享给其他人使用。</li>\n<li class=\"list-item\">添加测试用例</li>\n<li class=\"list-item\">添加<code>travis-ci</code>自动集成测试.</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n"}