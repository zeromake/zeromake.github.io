{"title":"karma使用webpack的代码覆盖率测试","date":"2017-05-07T14:21:46.000Z","tags":["karma","webpack","istanbul"],"last_date":"2017-05-07T23:23:37.000Z","filename":"karma-webpack-istanbul","body":"<div class=\"toc\"><ul class=\"toc-tree\">\n<li class=\"toc-item toc-level-1\">\n<ul>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#前言\"><span class=\"toc-number\"></span><span class=\"toc-text\">前言</span></a>\n</li>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#一、karma的使用\"><span class=\"toc-number\"></span><span class=\"toc-text\">一、karma的使用</span></a>\n</li>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#二、karma + webpack 的使用\"><span class=\"toc-number\"></span><span class=\"toc-text\">二、karma + webpack 的使用</span></a>\n<ul>\n<li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#配置karma + webpack\"><span class=\"toc-number\"></span><span class=\"toc-text\">配置karma + webpack</span></a>\n</li>\n<li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#运行karma + webapck测试\"><span class=\"toc-number\"></span><span class=\"toc-text\">运行karma + webapck测试</span></a>\n</li></ul>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#三、karma + webpack 的代码覆盖率测试\"><span class=\"toc-number\"></span><span class=\"toc-text\">三、karma + webpack 的代码覆盖率测试</span></a>\n<ul>\n<li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#配置 karma + webpack 的代码覆盖率测试\"><span class=\"toc-number\"></span><span class=\"toc-text\">配置 karma + webpack 的代码覆盖率测试</span></a>\n</li></ul>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#四、nodejs, browser测试使用同一套测试用例\"><span class=\"toc-number\"></span><span class=\"toc-text\">四、nodejs, browser测试使用同一套测试用例</span></a>\n</li>\n<li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#五、总结\"><span class=\"toc-number\"></span><span class=\"toc-text\">五、总结</span></a>\n</li></ul>\n</li></ul></div><h2><a class=\"anchor\" name=\"前言\" href=\"#前言\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>前言</h2><ul class=\"contains-list\">\n<li class=\"list-item\">距离上一次博客有2个月了，倒不是没有可写东西就是提不起劲写。</li>\n<li class=\"list-item\"><p>不说这些了这次写下我使用 <code>karma + webpack</code> 中遇到的代码覆盖率问题。</p>\n<h2><a class=\"anchor\" name=\"一、karma的使用\" href=\"#一、karma的使用\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一、karma的使用</h2><p>自个去搜吧，感觉讲这个的真的多。我就说一些建议。</p>\n</li>\n<li class=\"list-item\"><p>karma的测试框架改用mocha这样对于一个需要nodejs, browser测试的测试用例可以共用。具体的可以看我的 <a href=\"https://github.com/zeromake/marked-zm\">marked-zm</a></p>\n<h2><a class=\"anchor\" name=\"二、karma + webpack 的使用\" href=\"#二、karma + webpack 的使用\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>二、karma + webpack 的使用</h2><p>依旧是很多人写过了，但是还是写下吧。</p>\n<h3><a class=\"anchor\" name=\"配置karma + webpack\" href=\"#配置karma + webpack\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置karma + webpack</h3></li>\n<li class=\"list-item\"><p>需要的 npm 包</p>\n<pre class=\"code shell\"><code class=\"shell\">npm i karma karma-mocha karma-phantomjs-launcher karma-sinon-chai /\nkarma-spec-reporter karma-webpack mocha sinon sinon-chai -D\n</code></pre>\n</li>\n<li class=\"list-item\"><p>package.json</p>\n<pre class=\"code json\"><code class=\"json\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n      <span class=\"hljs-attr\">\"karma-run\"</span>: <span class=\"hljs-string\">\"karma run\"</span>,\n      <span class=\"hljs-attr\">\"karma-start\"</span>: <span class=\"hljs-string\">\"karma start test/unit/karma.conf.js\"</span>,\n      <span class=\"hljs-attr\">\"karma-single\"</span>: <span class=\"hljs-string\">\"karma start test/unit/karma.conf.js --single-run\"</span>\n  }\n}\n</code></pre>\n</li>\n<li class=\"list-item\"><p>test/unit/karma.conf.js</p>\n<pre class=\"code javascript\"><code class=\"javascript\"><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">config</span>) </span>{\n  config.set({\n      <span class=\"hljs-attr\">webpack</span>: {\n          <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">'inline-source-map'</span>, <span class=\"hljs-comment\">// 推荐使用inline-source-map</span>\n          <span class=\"hljs-built_in\">module</span>: {\n              <span class=\"hljs-attr\">rules</span>: [<span class=\"hljs-comment\">/* loaders */</span>]\n          }\n      },\n      <span class=\"hljs-attr\">frameworks</span>: [<span class=\"hljs-string\">'mocha'</span>, <span class=\"hljs-string\">'sinon-chai'</span>], <span class=\"hljs-comment\">// 测试框架随便一定要要和我一样</span>\n      files: [\n          <span class=\"hljs-string\">'./index.js'</span> <span class=\"hljs-comment\">// 推荐使用一个入口来导入所有的测试。</span>\n      ],\n      <span class=\"hljs-attr\">preprocessors</span>: {\n          <span class=\"hljs-string\">'./index.js'</span>: [<span class=\"hljs-string\">'webpack'</span>] <span class=\"hljs-comment\">// 使用什么配置</span>\n      },\n      <span class=\"hljs-attr\">reporters</span>: [<span class=\"hljs-string\">'spec'</span>], <span class=\"hljs-comment\">// spec显示插件</span>\n      port: <span class=\"hljs-number\">9876</span>, <span class=\"hljs-comment\">// 端口</span>\n      colors: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">logLevel</span>: config.LOG_INFO,\n      <span class=\"hljs-attr\">autoWatch</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-attr\">browsers</span>: [<span class=\"hljs-string\">'PhantomJS'</span>],\n      <span class=\"hljs-attr\">singleRun</span>: <span class=\"hljs-literal\">false</span>\n  })\n}\n</code></pre>\n</li>\n<li class=\"list-item\"><p>test/unit/index.js</p>\n<pre class=\"code javascript\"><code class=\"javascript\"><span class=\"hljs-comment\">// 动态加载所有测试文件</span>\n<span class=\"hljs-keyword\">const</span> testsContext = <span class=\"hljs-built_in\">require</span>.context(<span class=\"hljs-string\">'./specs'</span>, <span class=\"hljs-literal\">true</span>, /\\.spec$/)\ntestsContext.keys().forEach(testsContext)\n</code></pre>\n</li>\n<li class=\"list-item\"><p>test/unit/specs/test.spec.js</p>\n<pre class=\"code javascript\"><code class=\"javascript\">describe(<span class=\"hljs-string\">'Test'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n  it(<span class=\"hljs-string\">'test 1+1'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n      expect(<span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">1</span>).to.equal(<span class=\"hljs-number\">2</span>)\n  })\n})\n</code></pre>\n<h3><a class=\"anchor\" name=\"运行karma + webapck测试\" href=\"#运行karma + webapck测试\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>运行karma + webapck测试</h3><pre class=\"code shell\"><code class=\"shell\"><span class=\"hljs-meta\">#</span><span class=\"bash\"> 开启 karma 动态构建</span>\nnpm run karma-start\n<span class=\"hljs-meta\">#</span><span class=\"bash\"> new shell，运行一次测试</span>\nnpm run karma-run\n</code></pre>\n<p>或者直接单次构建并测试</p>\n<pre class=\"code shell\"><code class=\"shell\">npm run karma-single\n</code></pre>\n<h2><a class=\"anchor\" name=\"三、karma + webpack 的代码覆盖率测试\" href=\"#三、karma + webpack 的代码覆盖率测试\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>三、karma + webpack 的代码覆盖率测试</h2><p>这里如果直接用 <code>karma-coverage</code> 会出现直接对 <code>karma</code> 配置中入口文件生成的 <code>webpack</code> 代码的代码覆盖率测试。会出现很多 <code>webpack</code> 生成的额外代码。\nundefined</p>\n<p>而且也不是源代码的代码覆盖率测试。\nundefined</p>\n<p>这里有两个方案:</p>\n</li>\n<li class=\"list-item\"><p><a href=\"https://github.com/karma-runner/karma-coverage\">karma-coverage</a> + <a href=\"https://github.com/deepsweet/isparta-loader\">isparta-loader</a>  </p>\n<p>来自 <a href=\"https://github.com/ElemeFE/element\">element-ui</a> 然后去看 <code>isparta-loader</code> 发觉作者已经废弃推荐换到 <code>istanbul-instrumenter-loader</code> 所以这个我也不用了，直接看另一个方案吧。</p>\n</li>\n<li class=\"list-item\"><p><a href=\"https://github.com/mattlewis92/karma-coverage-istanbul-reporter\">karma-coverage-istanbul-reporter</a> + <a href=\"https://github.com/webpack-contrib/istanbul-instrumenter-loader\">istanbul-instrumenter-loader</a>  </p>\n<p>这两个包除了 <code>README</code> 的说明没有找到更多的资料，只好自己试着用，下面直接看如何使用吧。</p>\n<h3><a class=\"anchor\" name=\"配置 karma + webpack 的代码覆盖率测试\" href=\"#配置 karma + webpack 的代码覆盖率测试\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置 karma + webpack 的代码覆盖率测试</h3></li>\n<li class=\"list-item\">需要的其它 npm 包<pre class=\"code shell\"><code class=\"shell\">npm i karma-coverage-istanbul-reporter istanbul-instrumenter-loader -D\n</code></pre>\n</li>\n<li class=\"list-item\"><p>test/unit/karma.conf.js</p>\n<pre class=\"code javascript\"><code class=\"javascript\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">const</span> srcPath = path.resolve(__dirname, <span class=\"hljs-string\">'../../src'</span>)\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">config</span>) </span>{\n  config.set({\n      <span class=\"hljs-attr\">webpack</span>: {\n          <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">'inline-source-map'</span>, <span class=\"hljs-comment\">// 推荐使用inline-source-map</span>\n          <span class=\"hljs-built_in\">module</span>: {\n              <span class=\"hljs-attr\">rules</span>: [\n                  <span class=\"hljs-comment\">// 像eslint-loader一样使用,并限定在源码上。</span>\n                  {\n                      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,\n                      <span class=\"hljs-attr\">enforce</span>: <span class=\"hljs-string\">'pre'</span>,\n                      <span class=\"hljs-attr\">use</span>: <span class=\"hljs-string\">'istanbul-instrumenter-loader'</span>,\n                      <span class=\"hljs-attr\">inclues</span>: [srcPath]\n                  }\n                  <span class=\"hljs-comment\">/* loaders */</span>\n              ]\n          }\n      },\n      <span class=\"hljs-attr\">frameworks</span>: [<span class=\"hljs-string\">'mocha'</span>, <span class=\"hljs-string\">'sinon-chai'</span>], <span class=\"hljs-comment\">// 测试框架随便一定要要和我一样</span>\n      files: [\n          <span class=\"hljs-string\">'./index.js'</span> <span class=\"hljs-comment\">// 推荐使用一个入口来导入所有的测试。</span>\n      ],\n      <span class=\"hljs-attr\">preprocessors</span>: {\n          <span class=\"hljs-string\">'./index.js'</span>: [<span class=\"hljs-string\">'webpack'</span>] <span class=\"hljs-comment\">// 使用什么配置</span>\n      },\n      <span class=\"hljs-comment\">// 增加代码覆盖率输出插件</span>\n      reporters: [<span class=\"hljs-string\">'spec'</span>，<span class=\"hljs-string\">'coverage-istanbul'</span>], \n      <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">9876</span>, <span class=\"hljs-comment\">// 端口</span>\n      colors: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">logLevel</span>: config.LOG_INFO,\n      <span class=\"hljs-attr\">autoWatch</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-attr\">browsers</span>: [<span class=\"hljs-string\">'PhantomJS'</span>],\n      <span class=\"hljs-attr\">singleRun</span>: <span class=\"hljs-literal\">false</span>,\n      <span class=\"hljs-comment\">// 配置代码覆盖率插件</span>\n      coverageIstanbulReporter: {\n          <span class=\"hljs-comment\">// 以什么格式, 这里设置了输出 html文件 ,info文件 ,及控制台</span>\n          reports: [<span class=\"hljs-string\">'html'</span>, <span class=\"hljs-string\">'lcovonly'</span>, <span class=\"hljs-string\">'text-summary'</span>],\n          <span class=\"hljs-comment\">// 将文件输出路径定位</span>\n          dir: path.join(__dirname, <span class=\"hljs-string\">'coverage'</span>),\n          <span class=\"hljs-comment\">// 修正 weback 路径（翻译了是这个意思）</span>\n          fixWebpackSourcePaths: <span class=\"hljs-literal\">true</span>,\n          <span class=\"hljs-comment\">// 将生成的html放到./coverage/html/下</span>\n          <span class=\"hljs-string\">'report-config'</span>: {\n              <span class=\"hljs-attr\">html</span>: {\n                  <span class=\"hljs-attr\">subdir</span>: <span class=\"hljs-string\">'html'</span>\n              }\n          }\n      }\n  })\n}\n</code></pre>\n</li>\n<li class=\"list-item\"><p>代码参考 <a href=\"https://github.com/zeromake/vue-dragging/tree/test\">vue-dragging</a> or <a href=\"https://github.com/zeromake/marked-zm\">marked-zm</a></p>\n<h2><a class=\"anchor\" name=\"四、nodejs, browser测试使用同一套测试用例\" href=\"#四、nodejs, browser测试使用同一套测试用例\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>四、nodejs, browser测试使用同一套测试用例</h2></li>\n<li class=\"list-item\"><p>package.json</p>\n<pre class=\"code json\"><code class=\"json\">{\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n      <span class=\"hljs-attr\">\"node-test\"</span>: <span class=\"hljs-string\">\"mocha --reporter spec --require\\\n       test/unit/common test/unit/specs/*.spec.js\"</span>\n  }\n}\n</code></pre>\n</li>\n<li class=\"list-item\"><p>test/unit/common.js\nglobal.chai = require(&quot;chai&quot;)\nglobal.should = require(&quot;chai&quot;).should()\nglobal.expect = require(&quot;chai&quot;).expect\nglobal.AssertionError = require(&quot;chai&quot;).AssertionError\nconst sinonChai = require(&quot;sinon-chai&quot;)\n\nchai.use(sinonChai)</p>\n<p>无需修改其它代码见 <a href=\"https://github.com/zeromake/marked-zm\">marked-zm</a></p>\n<h2><a class=\"anchor\" name=\"五、总结\" href=\"#五、总结\"><svg aria-hidden=\"true\" class=\"octicon octicon-link\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>五、总结</h2></li>\n<li class=\"list-item\">下篇看看要不探讨 <code>ci</code> 集成，或者 <code>vue</code> 的面板组件直接加载组件并且切换不会丢失状态。</li>\n<li class=\"list-item\">原来想写 <code>npm</code> 包发布后来发觉满地都是，就算了。</li>\n<li class=\"list-item\"></li>\n</ul>\n"}